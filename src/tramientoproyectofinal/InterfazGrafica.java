/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tramientoproyectofinal;

//graficar
import static com.sun.org.apache.bcel.internal.util.SecuritySupport.getResourceAsStream;
import java.awt.Color;
import java.io.BufferedReader;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

//leer archivos
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.lazy.IBk;
import weka.classifiers.trees.J48;
import weka.core.Instances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils.DataSource;

/**
 *
 * @author kazam
 */
public class InterfazGrafica extends javax.swing.JFrame {
        private static final long serialVersionUID = 6294689542092367723L;
        //leer archivo
        String csvFile = ""; //archivo original
        String trainFile = ""; //archivo que va a contener los datos para el entrenamiento
        String testFile = ""; //archivo que va a contener los datos para la prueba
        BufferedReader br = null;
        BufferedWriter bwe = null;
        BufferedWriter bwp = null;
        String line = "";
        String cvsSplitBy = ","; //separador
        String numEjemplos; //se obtienen al leer el archivo
        String numAtributos;//se obtienen al leer el archivo
        String numClases;//se obtienen al leer el archivo
        
        float atributoX; //atributoX que el usuario ingresa en el textfield para graficarlo
        float atributoY; //atributoY que el usuario ingresa en el textfield para graficarlo
        int dato1int; // contiene el atributoX en tipo entero
        int dato2int; // contiene el atributoY en tipo entero
        
        int contTrain; //contador para el numero de ejemplos almacenados en el archivo train
        int contTest; //contador para el numero de ejemplos almacenados en el archivo test
        int contSuavizado; //contador para el numero de datos que se almacenan en el archivo datosSuavizados
        
        //variables ocupadas en el suavizado
        int numE; //numero de ejemplos(del archivo train) tipo entero
        int numA; //numero de atributos(del archivo train) tipo entero
        String kVecinos; //numero de vecinos mas cercanos que el usuario quiere para clasificar knn(textfield)
        String suavizadoFile; //archivo que va a contener los datos suavizados
        
        int kvecinos; //numero entero de vecinos mas cercanos
        float[][] ejemplos; //matriz que contiene los ejemplos del archivo Train
        float[][] ejemplos_copia; //matriz que se va a modificar para marcar datos ruido
        float[][] distancias; //matriz que va a contener las distancias de cada ejemplo respecto a los demas
        float[][] distancias_copia; //matriz que se va a modificar para marcar vecinos mas cercanos guardados
        float[][] nn; //matriz que va a contener los k vecinos mas cercanos de cada ejemplo
        BufferedWriter bws = null;
        
        //clasificador
        String clasificadorSelect; 
    /**
     * Creates new form InterfazGrafica
     */
    public InterfazGrafica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TFNejemplos = new javax.swing.JTextField();
        TFNatributos = new javax.swing.JTextField();
        TFNclases = new javax.swing.JTextField();
        GraficarNormal = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        TFSetX = new javax.swing.JTextField();
        TFSetY = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        GraficarSuavizado = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        RBknn = new javax.swing.JRadioButton();
        J48 = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        Cknn = new javax.swing.JTextField();
        SPanelSuavizado = new javax.swing.JScrollPane();
        SPanelNormal = new javax.swing.JScrollPane();
        SPanelClasiNormal = new javax.swing.JScrollPane();
        SPanelClasiSavizado = new javax.swing.JScrollPane();
        CargarArchivo = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        kvec = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        ETrain = new javax.swing.JTextField();
        ETest = new javax.swing.JTextField();
        AceptarClasificador = new javax.swing.JButton();
        JFChooser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Proyecto de Tratamiento de informaci칩n oto침o 2019");

        jLabel2.setText("No. Ejemplos Total:");

        jLabel3.setText("No. Atributos:");

        jLabel4.setText("No. Clases:");

        TFNejemplos.setEditable(false);
        TFNejemplos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFNejemplosActionPerformed(evt);
            }
        });

        TFNatributos.setEditable(false);
        TFNatributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFNatributosActionPerformed(evt);
            }
        });

        TFNclases.setEditable(false);
        TFNclases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFNclasesActionPerformed(evt);
            }
        });

        GraficarNormal.setText("Graficar");
        GraficarNormal.setEnabled(false);
        GraficarNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficarNormalActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Datos normales");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Datos con suavizado");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel7.setText("AtributoX");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel8.setText("AtributoY");

        TFSetX.setText("0");
        TFSetX.setName(""); // NOI18N
        TFSetX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFSetXActionPerformed(evt);
            }
        });

        TFSetY.setText("1");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setText("Clasificaci칩n");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel10.setText("Visualizaci칩n");

        GraficarSuavizado.setText("Suavizar y Graficar");
        GraficarSuavizado.setEnabled(false);
        GraficarSuavizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficarSuavizadoActionPerformed(evt);
            }
        });

        buttonGroup1.add(RBknn);
        RBknn.setSelected(true);
        RBknn.setText(" KNN");
        RBknn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBknnActionPerformed(evt);
            }
        });

        buttonGroup1.add(J48);
        J48.setText("J48");
        J48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                J48ActionPerformed(evt);
            }
        });

        jLabel12.setText("KNN");

        Cknn.setText("3");
        Cknn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CknnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(J48)
                    .addComponent(RBknn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Cknn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RBknn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(J48)
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(Cknn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        RBknn.getAccessibleContext().setAccessibleName("RBClasificador1");
        J48.getAccessibleContext().setAccessibleName("RBClasificador2");

        CargarArchivo.setText("Cargar Archivo");
        CargarArchivo.setActionCommand("");
        CargarArchivo.setEnabled(false);
        CargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarArchivoActionPerformed(evt);
            }
        });

        jLabel11.setText("NN para suavizado");

        kvec.setText("1");

        jLabel13.setText(" Entrenamiento:");

        jLabel14.setText(" Prueba:");

        ETrain.setEditable(false);

        ETest.setEditable(false);

        AceptarClasificador.setText("Aceptar");
        buttonGroup1.add(AceptarClasificador);
        AceptarClasificador.setEnabled(false);
        AceptarClasificador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarClasificadorActionPerformed(evt);
            }
        });

        JFChooser.setText("Elegir Archivo");
        JFChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(SPanelNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(147, 147, 147)
                                .addComponent(SPanelClasiNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(259, 259, 259))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(TFSetX, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(GraficarNormal)
                                                .addGap(35, 35, 35))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(TFSetY, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(JFChooser)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CargarArchivo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(ETest, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                                .addComponent(ETrain, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(TFNejemplos, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(33, 33, 33)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(SPanelSuavizado, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(SPanelClasiSavizado, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel3)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(TFNatributos, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jLabel4)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(TFNclases, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel11)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(kvec, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(GraficarSuavizado)))))))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(AceptarClasificador)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel10)
                            .addComponent(CargarArchivo)
                            .addComponent(TFNejemplos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JFChooser))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFSetX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFSetY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(14, 14, 14)
                        .addComponent(GraficarNormal)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(TFNatributos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(TFNclases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ETrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ETest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(kvec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GraficarSuavizado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SPanelSuavizado, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SPanelClasiSavizado, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 68, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SPanelNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(AceptarClasificador)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SPanelClasiNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );

        jLabel2.getAccessibleContext().setAccessibleName("LNEjemplos");
        jLabel3.getAccessibleContext().setAccessibleName("LNAtributos");
        jLabel4.getAccessibleContext().setAccessibleName("LNClases");
        TFNejemplos.getAccessibleContext().setAccessibleName("TFNejemplos");
        TFNatributos.getAccessibleContext().setAccessibleName("TFNatributos");
        TFNclases.getAccessibleContext().setAccessibleName("TFNclases");
        GraficarNormal.getAccessibleContext().setAccessibleName("GraficarNormal");
        TFSetX.getAccessibleContext().setAccessibleName("TFSetX");
        TFSetX.getAccessibleContext().setAccessibleDescription("");
        TFSetY.getAccessibleContext().setAccessibleName("TFSetY");
        TFSetY.getAccessibleContext().setAccessibleDescription("");
        GraficarSuavizado.getAccessibleContext().setAccessibleName("GraficarSuavizado");
        GraficarSuavizado.getAccessibleContext().setAccessibleDescription("");
        jPanel4.getAccessibleContext().setAccessibleName("");
        SPanelSuavizado.getAccessibleContext().setAccessibleName("SPanelSuavizado");
        SPanelNormal.getAccessibleContext().setAccessibleName("SPanelNormal");
        SPanelClasiNormal.getAccessibleContext().setAccessibleName("SPanelClasiNormal");
        SPanelClasiSavizado.getAccessibleContext().setAccessibleName("SPanelClasiSavizado");
        AceptarClasificador.getAccessibleContext().setAccessibleName("AceptarClasificador");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TFNejemplosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFNejemplosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFNejemplosActionPerformed

    private void TFNclasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFNclasesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFNclasesActionPerformed

    private void GraficarNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficarNormalActionPerformed
        
        String atriX="atributo"+TFSetX.getText(); //esta va a ser la etiqueta para el eje horizontal
        String atriY="atributo"+TFSetY.getText(); //esta va a ser la etiqueta para el eje vertical
        
        atributoX = Float.parseFloat(TFSetX.getText());//atributoX que el usuario ingresa
        atributoY = Float.parseFloat(TFSetY.getText());//atributoY que el usuario ingresa
        
        XYDataset dataset = createDataset(); //llenar el dataset a graficar
        
        // Create chart
        JFreeChart chart = ChartFactory.createScatterPlot(
        "Graficando datos sin suavizado", 
        atriX, atriY, dataset);//creando la grafica

        //Changes background color
        XYPlot plot = (XYPlot)chart.getPlot();
        plot.setBackgroundPaint(new Color(255,228,196));
    
        // Create Panel
        ChartPanel panel = new ChartPanel(chart);
        
        //setContentPane(panel);
        SPanelNormal.setViewportView(panel); //poner la grafica en el JScrollpane  
    }//GEN-LAST:event_GraficarNormalActionPerformed

    private void TFSetXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFSetXActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TFSetXActionPerformed

    private void GraficarSuavizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficarSuavizadoActionPerformed
        
        String datosS="./datosSuavizados.arff"; //archivo donde se va a almacenar los datos suavizados en formato arff
        String trainarff="./train.arff"; //archivo donde se va a almacenar los datos de entrenamiento en formato arff
        String testarff="./test.arff"; //archivo donde se va a almacenar los datos de prueba en formato arff
        
        kVecinos=kvec.getText(); //obteniendo el numero de kvecinos para el suavizado
        ArchivoToMatriz(); //metodo para pasar los datos de entrenamiento a un arreglo
        calcularDistancias(); //metodo para calcular las distancias de cada ejemplo hacia los otros
        obtenerNN(); //metodo para obtener los kvecinos mas cercanos
        limpiarRuido(); //metodo para marcar ejemplos que se consideran ruido y descartarlos
        try {
                guardarSuavizado(); //metodo para guardar los datos suavizados en un archivo 
            } catch (IOException ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        crearARFF(suavizadoFile,datosS); //convirtiendo el archivo de suavizado a formato arff
        crearARFF(trainFile,trainarff); //convirtiendo el archivo de entrenamiento a formato arff
        crearARFF(testFile,testarff); //convirtiendo el archivo de prueba a formato arff

        String atriX="atributo"+TFSetX.getText(); //esta va a ser la etiqueta para el eje horizontal
        String atriY="atributo"+TFSetY.getText();//esta va a ser la etiqueta para el eje vertical
        
        atributoX = Float.parseFloat(TFSetX.getText()); //atributoX que el usuario ingresa
        atributoY = Float.parseFloat(TFSetY.getText());//atributoY que el usuario ingresa
        
        XYDataset dataset = createDataset2(); //llenar el dataset a graficar
        // Create chart
        JFreeChart chart = ChartFactory.createScatterPlot(
        "Graficando datos con suavizado", 
        atriX, atriY, dataset); //creando la grafica

        //Changes background color
        XYPlot plot = (XYPlot)chart.getPlot();
        plot.setBackgroundPaint(new Color(255,228,196));
    
        // Create Panel
        ChartPanel panel = new ChartPanel(chart);
        //setContentPane(panel);
        SPanelSuavizado.setViewportView(panel); //poner la grafica en el JScrollpane  
        AceptarClasificador.setEnabled(true);
    }//GEN-LAST:event_GraficarSuavizadoActionPerformed

    private void RBknnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBknnActionPerformed
        //cuando se seleccione el radio button se muestran los parametros que se pueden modificar en el clasificador
        jLabel12.setVisible(true);
        Cknn.setVisible(true);
    }//GEN-LAST:event_RBknnActionPerformed

    private void TFNatributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFNatributosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFNatributosActionPerformed

    private void CargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarArchivoActionPerformed
       //seleccionando los archivos con los que se va a trabajar
        trainFile = "./train.csv";
        testFile = "./test.csv";
        
        contTrain=0;
        contTest=0;
        try {
            br = new BufferedReader(new FileReader(csvFile)); //con este se va a leer el archivo original
            
            bwe = new BufferedWriter(new FileWriter(trainFile)); //con este se va a escribir en el archivo train
            bwp = new BufferedWriter(new FileWriter(testFile)); //con este se va a escribir en el archivo test
            
            //leyendo las 3 primeras lineas del archivo
            numEjemplos=br.readLine(); //contiene el numero de ejemplos
            TFNejemplos.setText(numEjemplos);
            
            numAtributos=br.readLine(); //contiene el numero de atributos
            TFNatributos.setText(numAtributos);
            
            numClases=br.readLine(); ////contiene el numero de clases
            TFNclases.setText(numClases);
            
           
           int nejem = Integer.parseInt(numEjemplos); //se convierte el numero de ejemplos a entero
           int numTs= (int) ((int) nejem*0.20); //numero de ejemplos para el conjunto de prueba
           int numTr= nejem - numTs; //numero de ejemplos para el conjunto de entrenamiento
          
            while ((line = br.readLine()) != null) {
                String[] datos = line.split(cvsSplitBy); //lee la linea y  lo guarda en un arreglo
                
                int valorDado = (int) Math.floor(Math.random()*10); //genera numero aleatorio entre 0 y 10 sin contar al 10
                
                
                if(valorDado<9) //verifica si el num aleatorio es menor a 7
                {
                    if(contTrain<numTr) //verifica si el num de ejemplos de entrenamiento no ha llegado a su limite
                    {
                        for(int i=0;i<datos.length;i++) //guarda el ejemplo en el archivo train
                        {
                            if(i!=datos.length-1)
                            {
                                bwe.write(datos[i]+",");
                            }
                            else
                            {
                                bwe.write(datos[i]);   
                            }  
                        }
                        bwe.newLine();
                        contTrain++;
                    }
                    else //si el numero de ejemplos de entrenamiento llego a su limite
                    {
                        for(int i=0;i<datos.length;i++) //guarda el ejemplo en el archivo test
                        {
                            if(i!=datos.length-1)
                            {
                                bwp.write(datos[i]+",");   
                            }
                            else
                            {
                                bwp.write(datos[i]);   
                            }  
                        }
                        bwp.newLine();
                        contTest++;
                            
                    }
                }
                else //si el num aleatorio es mayor a 7
                {
                   if(contTest<numTs) //verifica si el num de ejemplos de prueba no ha llegado a su limite
                   {
                       for(int i=0;i<datos.length;i++) //guarda el ejemplo en el archivo test
                        {
                            if(i!=datos.length-1) 
                            {
                                bwp.write(datos[i]+",");   
                            }
                            else
                            {
                                bwp.write(datos[i]);   
                            }  
                        }
                        bwp.newLine();
                        contTest++;
                    }
                    else //si el num de ejemplos de prueba ha llegado a su limite
                   {
                       for(int i=0;i<datos.length;i++) //guarda el ejemplo en el archivo train
                        {
                            if(i!=datos.length-1)
                            {
                                bwe.write(datos[i]+",");
                            }
                            else
                            {
                                bwe.write(datos[i]);   
                            }  
                        }
                        bwe.newLine();
                        contTrain++;
                    }
                }
            }
            //guarda los cambios en ambos archivos
            bwe.flush();
            bwp.flush();
            
            //Muestra en la interfaz el numero de ejemplos en los archivos train y test
            String ne = Integer.toString(contTrain);
            String np = Integer.toString(contTest);
            ETrain.setText(ne);
            ETest.setText(np);
            GraficarNormal.setEnabled(true);
            GraficarSuavizado.setEnabled(true);
            } catch (FileNotFoundException e) {
            } catch (IOException e) {
            } finally {
                if (br != null) {
                    try {
                        br.close();
                    } 
                    catch (IOException e) {
                    }
                }
            }
    }//GEN-LAST:event_CargarArchivoActionPerformed

    private void CknnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CknnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CknnActionPerformed

    private void AceptarClasificadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarClasificadorActionPerformed
        // TODO add your handling code here:
        if(RBknn.isSelected()==true) //verifica si el clasificador KNN esta seleccionado
        {
            try {
                Knn(); //clasifica con los datos no suavizados
            } catch (Exception ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                KnnSuavizado(); //clasifica con los datos no suavizados
            } catch (Exception ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        if(J48.isSelected()==true) //verifica si el clasificador J48 esta seleccionado
        {
            try {
                J48();
            } catch (Exception ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                J48Suavizado();
            } catch (Exception ex) {
                Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_AceptarClasificadorActionPerformed

    private void J48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_J48ActionPerformed
        //si se selecciona este clasificador se deshabilitan los parametros del KNN
        jLabel12.setVisible(false);
        Cknn.setVisible(false);
    }//GEN-LAST:event_J48ActionPerformed

    private void JFChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JFChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        //System.out.println("Selected file: " + selectedFile.getAbsolutePath());
        csvFile=selectedFile.getAbsolutePath();
        }
        CargarArchivo.setEnabled(true);
    }//GEN-LAST:event_JFChooserActionPerformed
    
    //dataset graficar datos normales
    private XYDataset createDataset() {
        XYSeriesCollection dataset = new XYSeriesCollection(); //se crea un dataset que va a contener los datos a graficar
     
        int nc = Integer.parseInt(numClases); //se convierte el numero de clases a entero
        
        XYSeries [] xyseries = new XYSeries[nc]; //ahora se declara un arreglo de tipo XYSeries del tama침o del numero de clases con esto se asegura una figura para cada clase
          
        for(int i=0;i<nc;i++) //ahora a cada clase se le asigna un nombre (clase0, clase1,etc)
        {
            String cad = Integer.toString(i);
            xyseries[i]= new XYSeries("Clase "+cad);
        }
            
        try{
            BufferedReader br = new BufferedReader(new FileReader(trainFile)); //se vuelve a leer el archivo train
            while ((line = br.readLine()) != null) {
                String[] datos = line.split(cvsSplitBy);
                
                dato1int = (int) atributoX; //el atributoX que el usuario elige se convierte a entero
                dato2int = (int) atributoY;//el atributoY que el usuario elige se convierte a entero
                
                //para terminos practicos se manejara el atributo elegido como flotante
                float dato1 = Float.parseFloat(datos[dato1int]); 
                float dato2 = Float.parseFloat(datos[dato2int]); 
                
               for(int i=0;i<nc;i++) //aqui se hace un ciclo desde i=0 hasta i<numeroClases esto para agregar cada ejemplo a su respectiva clase (figura)
                {
                    String cad = Integer.toString(i);
                    
                    if(cad.equals(datos[datos.length-1])) //verifica si la clase del ejemplo es igual a alguna de las clases creadas (xyseries)
                    {
                    xyseries[i].add(dato1,dato2); //en caso de que la clase del ejemplo sea igual a alguna de las creadas se agrega a esa serie
                    }
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                }
            }
        }
    //una vez que ya se agregaron los ejemplos a sus respectivas clases 
    //se agregan todas series al dataset 
    for(int i=0;i<nc;i++)
    {
       dataset.addSeries(xyseries[i]);
    }
   
    return dataset; //se retorna el dataset que va a ser graficado
  }
  
    //dataset graficar datos suavizados
    private XYDataset createDataset2(){
        XYSeriesCollection dataset = new XYSeriesCollection();//se crea un dataset que va a contener los datos a graficar
            
        int nc = Integer.parseInt(numClases); //se convierte el numero de clases a entero
        XYSeries [] xyseries = new XYSeries[nc];//ahora se declara un arreglo de tipo XYSeries del tama침o del numero de clases con esto se asegura una figura para cada clase
            
        for(int i=0;i<nc;i++) //ahora a cada clase se le asigna un nombre (clase0, clase1,etc)
        {
            String cad = Integer.toString(i);
            xyseries[i]= new XYSeries("Clase "+cad);
        }
           
        try {
            BufferedReader brr = new BufferedReader(new FileReader(suavizadoFile)); //aqui se lee el archivo con los datos suavizados
            
            while ((line = brr.readLine()) != null) 
            {
                String[] datos = line.split(cvsSplitBy);
                
                dato1int = (int) atributoX; //el atributoX que el usuario elige se convierte a entero
                dato2int = (int) atributoY;//el atributoY que el usuario elige se convierte a entero
                
                //para terminos practicos se manejara el atributo elegido como flotante
                
                float dato1 = Float.parseFloat(datos[dato1int]);
                float dato2 = Float.parseFloat(datos[dato2int]);
                
                for(int i=0;i<nc;i++) //aqui se hace un ciclo desde i=0 hasta i<numeroClases esto para agregar cada ejemplo a su respectiva clase (figura)
                {
                    String cad = Integer.toString(i);
                    
                    if(cad.equals(datos[datos.length-1]))//verifica si la clase del ejemplo es igual a alguna de las clases creadas (xyseries)
                    {
                         xyseries[i].add(dato1,dato2);//en caso de que la clase del ejemplo sea igual a alguna de las creadas se agrega a esa serie
                    }
                    
                } 
            }  
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                }
            }
        }
    //una vez que ya se agregaron los ejemplos a sus respectivas clases 
    //se agregan todas series al dataset 
    for(int i=0;i<nc;i++)
    {
       dataset.addSeries(xyseries[i]);
    }
    
    return dataset; //se retorna el dataset que va a ser graficado
  }
    
  //metodos para suavizado
    public void ArchivoToMatriz(){    
        try {
            BufferedReader br = new BufferedReader(new FileReader(trainFile));
            
            numA = Integer.parseInt(numAtributos);
            
            ejemplos = new float[contTrain][numA+1]; //se crea una matriz de tama침o (N.Ejem Train) x (N. Atributos+ la clase)
            int numLineas=0; //este contador ayuda para ubicar el numero de linea en la matriz
            
            while ((line = br.readLine()) != null) 
            {
                String[] datos = line.split(cvsSplitBy);
                
                for(int cont=0; cont<datos.length; cont++ )//con este ciclo se almacena el ejemplo en la matriz
                {
                    float dato = Float.parseFloat(datos[cont]);
                    ejemplos[numLineas][cont]=dato; 
                }
                numLineas++; 
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                e.printStackTrace();
                }
            }
        }
    }
        
    public void calcularDistancias(){
        distancias= new float[contTrain][contTrain]; //se crea una matriz de tama침o (N. Ejem Train) (N. Ejem Train) 
        float raiz; //esta variable almacena la raiz de la sumas
        float sum; //esta variable almacena la suma de las restas entre atributos
            
        for(int i=0;i<contTrain;i++) //filas
        {
            for(int j=0;j<contTrain;j++) //columnas
            {
                if(j<i) //para fines practicos solo se calculan las distancias de la diagonal inferior
                {
                    sum=0;
                    raiz=0;
                    for(int k=0;k<numA;k++) //recorre los atributos
                    {
                        float resta=0;
                        resta=ejemplos[i][k]- ejemplos[j][k]; //atributo1 - atributo2
                        sum = sum + ((float) Math.pow((double)resta,2)); //lo que tiene sum le agrega la resta anterior elevada al cuadrado
                    }
                    raiz=(float) Math.sqrt(sum); // una vez que suma todo le saca raiz cuadrada
                        
                    distancias[i][j]=raiz; //se agrega como la distancia del ejemplo i al ejemplo j
                    distancias[j][i]=raiz; //la distancia del ejemplo i al j es la misma que dee ejemplo j al i
                }
                    
                if(j==i)
                {
                    distancias[i][j]=10000; //por conveniencia la diagonal la dejamos con un valor de 10000
                }
            }
        }   
    }
        
    public void obtenerNN(){
        distancias_copia= new float[contTrain][contTrain]; //se crea una copia de la matriz de distancias para poder hacer modificaciones
        kvecinos = Integer.parseInt(kVecinos); //se obtiene el numero de vecinos
        nn = new float[contTrain][kvecinos]; //se crea una matriz de (N. Ejem Train) (K)
          
        //haciendo una copia de la matriz distancias
        for(int i=0;i<contTrain;i++)
        {
            for(int j=0;j<contTrain;j++)
            {
                distancias_copia[i][j]=distancias[i][j];
            } 
        }
            
            
        for(int i=0;i<contTrain;i++) //num Ejemplos
        {
            for(int j=0;j<kvecinos;j++) //num k
            {
                float menor=10000; //variable que va a contener el la distancia menor
                int fm=0; //variable que va a contener el numero de fila de la distancia menor
                int cm=0; //variable que va a contener el numero de columna de la distancia menor
                
                for(int k=0;k<contTrain;k++) //se busca la distancia menor del ejemplo hacia los otros
                {
                    if(distancias_copia[i][k]<menor) //se verifica si la distancia es menor que lo que contiene menor, aqui nos ayuda que la diagonal tenga 10000
                    {
                        menor=distancias_copia[i][k]; //si es menor, la variable menor ahora va a contener esa distancia
                        fm=i; //se guarda la fila
                        cm=k; //se guarda la columna
                    }
                }
                nn[i][j]=menor; //se agrega lo que tiene la variable menor al j vecino del ejemplo
                distancias_copia[fm][cm]=10000; // para ya no tomar en cuenta esta distancia se actualiza con un valor de 10000
                 
            } 
        }
    }
        
    public void limpiarRuido(){
        ejemplos_copia= new float[contTrain][numA+1]; //se crea una copia de la matriz ejemplos para poder hacerle modificaciones
        float mayoria=0; //esta variable contiene el numero de vecinos con la misma clase que el ejemplo
        float promedio= (float)kvecinos/2; // esta variable contiene la mitad de los vecinos
         
        //haciendo la copia de la matriz ejemplos
        for(int i=0;i<contTrain;i++)
        {
            for(int j=0;j<numA+1;j++)
            {
                ejemplos_copia[i][j]=ejemplos[i][j];
            } 
        }
            
        for(int i=0;i<contTrain;i++) //recorre num ejemplos
        {
            for(int j=0;j<kvecinos;j++) //recorre los vecinos
            {
                for(int k=0; k<contTrain;k++) //recorre num ejemplos (matriz distancia)
                {
                    if(distancias[i][k]==nn[i][j]) //verifica en la matriz distancia si esa distancia es igual a la del vecino de ejemplo i
                    {
                        //si se cumple la condicion anterior
                        if(ejemplos[i][numA]==ejemplos[k][numA]) //compara si las clases son las mismas
                        {
                            mayoria++; //en caso de que sean las mismas clases se incrementa 1 el valor de la variable
                        }
                    }
                }  
            }
            //una vez que verifica la clase del ejemplo con la de sus vecinos mas cercanos
            if(mayoria<promedio) //verifica si el numero de vecinos con la misma clase que el ejemplo es menor a la mitad de vecinos
            {
                //en caso de que se cumpla la condicion el ejemplo se marca como ruido
                ejemplos_copia[i][0]=10000;
            }
            mayoria=0;
        }
    }
    
    public void guardarSuavizado() throws IOException{
        //se selecciona el archivo donde se va a guardar los datos suavizados
        suavizadoFile = "./datosSuavizados.csv";
        bws = new BufferedWriter(new FileWriter(suavizadoFile));
        DecimalFormat decimalFormat=new DecimalFormat("#.#");
        contSuavizado=0;
            
        for(int i=0;i<contTrain;i++)
        {
            if(ejemplos_copia[i][0]!=10000)
            {
                for(int j=0;j<numA+1;j++)
                {
                    if(j!=numA)
                    {
                        if(ejemplos_copia[i][j] % 1 == 0)
                        {
                          bws.write(decimalFormat.format(ejemplos_copia[i][j])+",");  
                        }
                        else
                        {
                         bws.write(ejemplos_copia[i][j]+",");   
                        }
                          
                    }
                    else
                    {
                       if(ejemplos_copia[i][j]%1 == 0)
                       {
                           String cad = decimalFormat.format(ejemplos_copia[i][j]);
                           bws.write(cad);  
                       }
                       else
                       {
                           String cadena = Float.toString(ejemplos_copia[i][j]);
                           bws.write(cadena); 
                       }
                        
                        
                    }
                }
                bws.newLine();
                contSuavizado++;
            }
        }
        bws.flush(); 
        System.out.println("num suavizado"+contSuavizado);
        
    }
    
    public void crearARFF(String ArchRead,String ArchWrite){
            try {
            BufferedReader bras = new BufferedReader(new FileReader(ArchRead));
            BufferedWriter bwas = new BufferedWriter(new FileWriter(ArchWrite));
            
            int nC = Integer.parseInt(numClases);
            
            bwas.write("@RELATION prueba");
            bwas.newLine();
            
            for(int i=0;i<numA;i++){
                bwas.write("@ATTRIBUTE atributo"+i+"	REAL");
                bwas.newLine();
            }
            bwas.write("@ATTRIBUTE class{");
            for(int i=0;i<nC;i++){
                if(i!=nC-1)
                {
                  bwas.write(i+",");  
                }
                else
                {
                    String cadena = Integer.toString(i);
                    bwas.write(cadena);
                }
            }
            bwas.write("}");
            bwas.newLine();
            bwas.newLine();
            bwas.write("@DATA");
            //bwas.newLine();
            bwas.newLine();
            
           while ((line = bras.readLine()) != null) {
                
                String[] datos = line.split(cvsSplitBy);
                
                for(int i=0;i<datos.length;i++){
                    if(i!=datos.length-1)
                    {
                        bwas.write(datos[i]+",");
                    }
                    else
                    {
                        bwas.write(datos[i]);
                    }
                    
                }
                bwas.newLine();
                   
            }
          bwas.flush();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                e.printStackTrace();
                }
            }
        }
            
        }
    
    public void Knn() throws IOException, Exception{
        DataSource sourcetrain = null;
        sourcetrain = new DataSource("./train.arff");
        
        DataSource sourcetest = null;
        sourcetest = new DataSource("./test.arff");
        
        Instances trainingInstances = null;
        trainingInstances = sourcetrain.getDataSet();
        
	Instances testInstances = null;
        testInstances = sourcetest.getDataSet();
        
        trainingInstances.setClassIndex(trainingInstances.numAttributes() - 1);
        testInstances.setClassIndex(testInstances.numAttributes() - 1);
        
        IBk ibk = new IBk();
        int knn = Integer.parseInt(Cknn.getText());
	ibk.setKNN(knn);
        
        ibk.buildClassifier(trainingInstances);
        
        //Evaluation evaluation = null;
        
        Evaluation evaluation = new Evaluation(trainingInstances);
	evaluation.evaluateModel(ibk, testInstances);
	
        JTextArea textArea = new JTextArea();
        textArea.setText("CLASIFICAR KNN SIN SUAVIZADO \n\n"+"=== Summary === \n\n"+evaluation.toSummaryString()+"\n\n"+evaluation.toMatrixString());
        
        SPanelClasiNormal.setViewportView(textArea);
          
    }
    
    public void KnnSuavizado() throws Exception{
        DataSource sourcetrain = null;
        sourcetrain = new DataSource("./datosSuavizados.arff");
        
        DataSource sourcetest = null;
        sourcetest = new DataSource("./test.arff");
        
        Instances trainingInstances = null;
        trainingInstances = sourcetrain.getDataSet();
        
	Instances testInstances = null;
        testInstances = sourcetest.getDataSet();
        
        trainingInstances.setClassIndex(trainingInstances.numAttributes() - 1);
        testInstances.setClassIndex(testInstances.numAttributes() - 1);
        
        IBk ibk = new IBk();
        int knn = Integer.parseInt(Cknn.getText());
	ibk.setKNN(knn);
        
        ibk.buildClassifier(trainingInstances);
        
        //Evaluation evaluation = null;
        
        Evaluation evaluation = new Evaluation(trainingInstances);
	evaluation.evaluateModel(ibk, testInstances);
	
        JTextArea textArea = new JTextArea();
        textArea.setText("CLASIFICAR KNN CON SUAVIZADO \n\n "+"=== Summary === \n\n"+evaluation.toSummaryString());
        
        SPanelClasiSavizado.setViewportView(textArea);
        
    }
    
    public void J48() throws IOException, Exception{
        DataSource sourcetrain = null;
        sourcetrain = new DataSource("./train.arff");
        
        DataSource sourcetest = null;
        sourcetest = new DataSource("./test.arff");
        
        Instances trainingInstances = null;
        trainingInstances = sourcetrain.getDataSet();
        
	Instances testInstances = null;
        testInstances = sourcetest.getDataSet();
        
        trainingInstances.setClassIndex(trainingInstances.numAttributes() - 1);
        testInstances.setClassIndex(testInstances.numAttributes() - 1);
        
        J48 tree = new J48();
        tree.buildClassifier(trainingInstances);

        //Evaluation evaluation = null;
        
        Evaluation evaluation = new Evaluation(trainingInstances);
	evaluation.evaluateModel(tree, testInstances);
	
        JTextArea textArea = new JTextArea();
        textArea.setText("CLASIFICAR J48 (C4.5) SIN SUAVIZADO \n\n"+"=== Summary === \n\n"+evaluation.toSummaryString()+"\n\n"+evaluation.toMatrixString());
        
        SPanelClasiNormal.setViewportView(textArea);
          
    }
    
    public void J48Suavizado() throws Exception{
        DataSource sourcetrain = null;
        sourcetrain = new DataSource("./datosSuavizados.arff");
        
        DataSource sourcetest = null;
        sourcetest = new DataSource("./test.arff");
        
        Instances trainingInstances = null;
        trainingInstances = sourcetrain.getDataSet();
        
	Instances testInstances = null;
        testInstances = sourcetest.getDataSet();
        
        trainingInstances.setClassIndex(trainingInstances.numAttributes() - 1);
        testInstances.setClassIndex(testInstances.numAttributes() - 1);
        System.out.println(trainingInstances.numAttributes() - 1);
        System.out.println(testInstances.numAttributes() - 1);
        
        J48 tree = new J48();
        tree.buildClassifier(trainingInstances);

        //Evaluation evaluation = null;
        
        Evaluation evaluation = new Evaluation(trainingInstances);
	evaluation.evaluateModel(tree, testInstances);
	
        JTextArea textArea = new JTextArea();
        textArea.setText("CLASIFICAR J48 (C4.5) CON SUAVIZADO \n\n"+"=== Summary === \n\n"+evaluation.toSummaryString()+"\n\n"+evaluation.toMatrixString());
        
        SPanelClasiSavizado.setViewportView(textArea);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazGrafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AceptarClasificador;
    private javax.swing.JButton CargarArchivo;
    private javax.swing.JTextField Cknn;
    private javax.swing.JTextField ETest;
    private javax.swing.JTextField ETrain;
    private javax.swing.JButton GraficarNormal;
    private javax.swing.JButton GraficarSuavizado;
    private javax.swing.JRadioButton J48;
    private javax.swing.JButton JFChooser;
    private javax.swing.JRadioButton RBknn;
    private javax.swing.JScrollPane SPanelClasiNormal;
    private javax.swing.JScrollPane SPanelClasiSavizado;
    private javax.swing.JScrollPane SPanelNormal;
    private javax.swing.JScrollPane SPanelSuavizado;
    private javax.swing.JTextField TFNatributos;
    private javax.swing.JTextField TFNclases;
    private javax.swing.JTextField TFNejemplos;
    private javax.swing.JTextField TFSetX;
    private javax.swing.JTextField TFSetY;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField kvec;
    // End of variables declaration//GEN-END:variables
}
